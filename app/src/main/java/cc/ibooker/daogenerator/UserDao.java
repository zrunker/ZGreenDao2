package cc.ibooker.daogenerator;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import cc.ibooker.daogenerator.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UId = new Property(1, Long.class, "uId", false, "U_ID");
        public final static Property URealname = new Property(2, String.class, "uRealname", false, "U_REALNAME");
        public final static Property USex = new Property(3, String.class, "uSex", false, "U_SEX");
        public final static Property UBirthday = new Property(4, String.class, "uBirthday", false, "U_BIRTHDAY");
        public final static Property UHeight = new Property(5, Float.class, "uHeight", false, "U_HEIGHT");
        public final static Property UWeight = new Property(6, Float.class, "uWeight", false, "U_WEIGHT");
        public final static Property UDomicile = new Property(7, String.class, "uDomicile", false, "U_DOMICILE");
        public final static Property UPhone = new Property(8, Long.class, "uPhone", false, "U_PHONE");
        public final static Property UEmail = new Property(9, String.class, "uEmail", false, "U_EMAIL");
        public final static Property UWeibo = new Property(10, String.class, "uWeibo", false, "U_WEIBO");
    };

    private DaoSession daoSession;


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"U_ID\" INTEGER," + // 1: uId
                "\"U_REALNAME\" TEXT," + // 2: uRealname
                "\"U_SEX\" TEXT," + // 3: uSex
                "\"U_BIRTHDAY\" TEXT," + // 4: uBirthday
                "\"U_HEIGHT\" REAL," + // 5: uHeight
                "\"U_WEIGHT\" REAL," + // 6: uWeight
                "\"U_DOMICILE\" TEXT," + // 7: uDomicile
                "\"U_PHONE\" INTEGER," + // 8: uPhone
                "\"U_EMAIL\" TEXT," + // 9: uEmail
                "\"U_WEIBO\" TEXT);"); // 10: uWeibo
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long uId = entity.getUId();
        if (uId != null) {
            stmt.bindLong(2, uId);
        }
 
        String uRealname = entity.getURealname();
        if (uRealname != null) {
            stmt.bindString(3, uRealname);
        }
 
        String uSex = entity.getUSex();
        if (uSex != null) {
            stmt.bindString(4, uSex);
        }
 
        String uBirthday = entity.getUBirthday();
        if (uBirthday != null) {
            stmt.bindString(5, uBirthday);
        }
 
        Float uHeight = entity.getUHeight();
        if (uHeight != null) {
            stmt.bindDouble(6, uHeight);
        }
 
        Float uWeight = entity.getUWeight();
        if (uWeight != null) {
            stmt.bindDouble(7, uWeight);
        }
 
        String uDomicile = entity.getUDomicile();
        if (uDomicile != null) {
            stmt.bindString(8, uDomicile);
        }
 
        Long uPhone = entity.getUPhone();
        if (uPhone != null) {
            stmt.bindLong(9, uPhone);
        }
 
        String uEmail = entity.getUEmail();
        if (uEmail != null) {
            stmt.bindString(10, uEmail);
        }
 
        String uWeibo = entity.getUWeibo();
        if (uWeibo != null) {
            stmt.bindString(11, uWeibo);
        }
    }

    @Override
    protected void attachEntity(User entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // uId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // uRealname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // uSex
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // uBirthday
            cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5), // uHeight
            cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6), // uWeight
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // uDomicile
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // uPhone
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // uEmail
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // uWeibo
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setURealname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUSex(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUBirthday(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUHeight(cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5));
        entity.setUWeight(cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6));
        entity.setUDomicile(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUPhone(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setUEmail(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUWeibo(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
