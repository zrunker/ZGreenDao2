package cc.ibooker.daogenerator;

import java.util.List;
import cc.ibooker.daogenerator.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "USER".
 */
public class User {

    private Long id;
    private Long uId;
    private String uRealname;
    private String uSex;
    private String uBirthday;
    private Float uHeight;
    private Float uWeight;
    private String uDomicile;
    private Long uPhone;
    private String uEmail;
    private String uWeibo;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UserDao myDao;

    private List<Friend> friends;

    public User() {
    }

    public User(Long id) {
        this.id = id;
    }

    public User(Long id, Long uId, String uRealname, String uSex, String uBirthday, Float uHeight, Float uWeight, String uDomicile, Long uPhone, String uEmail, String uWeibo) {
        this.id = id;
        this.uId = uId;
        this.uRealname = uRealname;
        this.uSex = uSex;
        this.uBirthday = uBirthday;
        this.uHeight = uHeight;
        this.uWeight = uWeight;
        this.uDomicile = uDomicile;
        this.uPhone = uPhone;
        this.uEmail = uEmail;
        this.uWeibo = uWeibo;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getUId() {
        return uId;
    }

    public void setUId(Long uId) {
        this.uId = uId;
    }

    public String getURealname() {
        return uRealname;
    }

    public void setURealname(String uRealname) {
        this.uRealname = uRealname;
    }

    public String getUSex() {
        return uSex;
    }

    public void setUSex(String uSex) {
        this.uSex = uSex;
    }

    public String getUBirthday() {
        return uBirthday;
    }

    public void setUBirthday(String uBirthday) {
        this.uBirthday = uBirthday;
    }

    public Float getUHeight() {
        return uHeight;
    }

    public void setUHeight(Float uHeight) {
        this.uHeight = uHeight;
    }

    public Float getUWeight() {
        return uWeight;
    }

    public void setUWeight(Float uWeight) {
        this.uWeight = uWeight;
    }

    public String getUDomicile() {
        return uDomicile;
    }

    public void setUDomicile(String uDomicile) {
        this.uDomicile = uDomicile;
    }

    public Long getUPhone() {
        return uPhone;
    }

    public void setUPhone(Long uPhone) {
        this.uPhone = uPhone;
    }

    public String getUEmail() {
        return uEmail;
    }

    public void setUEmail(String uEmail) {
        this.uEmail = uEmail;
    }

    public String getUWeibo() {
        return uWeibo;
    }

    public void setUWeibo(String uWeibo) {
        this.uWeibo = uWeibo;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Friend> getFriends() {
        if (friends == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FriendDao targetDao = daoSession.getFriendDao();
            List<Friend> friendsNew = targetDao._queryUser_Friends(id);
            synchronized (this) {
                if(friends == null) {
                    friends = friendsNew;
                }
            }
        }
        return friends;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetFriends() {
        friends = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
