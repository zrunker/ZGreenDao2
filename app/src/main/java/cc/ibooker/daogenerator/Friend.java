package cc.ibooker.daogenerator;

import cc.ibooker.daogenerator.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "FRIEND".
 */
public class Friend {

    private Long id;
    private String fGname;
    private Long fUid;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient FriendDao myDao;

    private User user;
    private Long user__resolvedKey;


    public Friend() {
    }

    public Friend(Long id) {
        this.id = id;
    }

    public Friend(Long id, String fGname, Long fUid) {
        this.id = id;
        this.fGname = fGname;
        this.fUid = fUid;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getFriendDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getFGname() {
        return fGname;
    }

    public void setFGname(String fGname) {
        this.fGname = fGname;
    }

    public Long getFUid() {
        return fUid;
    }

    public void setFUid(Long fUid) {
        this.fUid = fUid;
    }

    /** To-one relationship, resolved on first access. */
    public User getUser() {
        Long __key = this.fUid;
        if (user__resolvedKey == null || !user__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User userNew = targetDao.load(__key);
            synchronized (this) {
                user = userNew;
            	user__resolvedKey = __key;
            }
        }
        return user;
    }

    public void setUser(User user) {
        synchronized (this) {
            this.user = user;
            fUid = user == null ? null : user.getId();
            user__resolvedKey = fUid;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    @Override
    public String toString() {
        return "Friend{" +
                "id=" + id +
                ", fGname='" + fGname + '\'' +
                ", fUid=" + fUid +
                ", user=" + user +
                '}';
    }
}
